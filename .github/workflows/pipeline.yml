name: Deployment pipeline

on:
  push:
    branches:
      - main

jobs:
  build_and_test: # 1. 重命名 Job
    name: Build and Test App # 为 Job 添加一个易读的名称
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm install

      # Playwright 特定的步骤：安装浏览器驱动
      # 这是官方推荐的方法，可以确保浏览器版本与 Playwright 版本兼容
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps # '--with-deps' 会安装操作系统依赖 (主要针对 Linux)

      - name: Check style
        run: npm run eslint
      - name: Build
        run: npm run build
      - name: Run unit/integration tests # 区分 npm test 和 e2e 测试
        run: npm test

      # 运行 Playwright 端到端测试
      # 假设你的 Playwright 测试命令在 package.json 中定义为 'test:e2e' 或类似
      # 或者你可以直接调用 playwright test
      - name: Run Playwright e2e tests
        # 选项 1: 如果你的 package.json script 运行 Playwright 测试
        # run: npm run test:e2e
        # 选项 2: 直接调用 Playwright (更常见)
        run: npx playwright test

  deploy: # 1. 重命名 Job
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: build_and_test # 2. 添加 'needs' 关键字，确保此 Job 在 build_and_test 成功后运行
    if: github.ref == 'refs/heads/main' && success() # 3. (推荐) 确保只在 main 分支且前置 Job 成功时部署
    steps:
      - name: Trigger deployment
        uses: render-actions/deploy-to-render@v1.4.5
        with:
          serviceId: ${{ secrets.RENDER_SERVICE_ID }}
          apiKey: ${{ secrets.RENDER_API_KEY }}
          multipleDeployment: false # optional, default true